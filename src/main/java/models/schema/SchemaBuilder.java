package models.schema;

import models.schema.field.DataType;
import models.schema.field.Field;
import models.schema.field.FieldContrain;
import models.schema.field.FieldKey;
import org.jetbrains.annotations.NotNull;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class SchemaBuilder {

	@NotNull private final List<Field> fields;
	@NotNull private final String schemaName;
	@NotNull private final Connection connection;

	public SchemaBuilder(@NotNull String name, @NotNull Connection connection) {
		this.schemaName = name;
		this.connection = connection;
		this.fields = new ArrayList<>();
	}

	public SchemaBuilder id() {
		Field field = new Field(FieldKey.id, DataType.String, FieldContrain.required);
		this.fields.add(field);

		return this;
	}

	public SchemaBuilder id(DataType dataType) {
		Field field = new Field(FieldKey.id, dataType, FieldContrain.required, FieldContrain.autogenerated);
		this.fields.add(field);

		return this;
	}

	public SchemaBuilder field(String fieldName, DataType dataType, FieldContrain... contrains) {
		final Field field = new Field(fieldName, dataType, contrains);
		this.fields.add(field);

		return this;
	}

	public SchemaBuilder field(FieldKey fieldKey, DataType dataType, FieldContrain... contrains) {
		return field(fieldKey.name(), dataType, contrains);
	}

	public void create() throws Exception {
		StringBuilder command = new StringBuilder();

		command.append("CREATE TABLE IF NOT EXISTS ").append(this.schemaName).append(" (");

		for (int i = 0; i < this.fields.size(); i++) {
			Field field = this.fields.get(i);

			command.append(field.name);

			String type;
			switch (field.dataType) {
				case String:
					type = "TEXT";
					break;
				case Integer:
					type = "INTEGER";
					break;
				case Float:
					type = "FLOAT";
					break;
				case Double:
					type = "DOUBLE";
					break;
				case Date:
					type = "DATETIME";
					break;
				default:
					type = "BLOB";
					break;
			}

			command.append(" ").append(type);

			for (FieldContrain contrain : field.contrains) {
				switch (contrain) {
					case required:
						command.append(" not null");
						break;
					case nullable:
						command.append(" null");
						break;
					case autogenerated:
						command.append(" auto_increment");
						break;
				}
			}

			if (field.name.equals("id")) {
				command.append(", primary key(id)");
			}

			if (i != this.fields.size() - 1) {
				// Not the last one
				command.append(", ");
			}
		}

		command.append(");");

		Statement statement = this.connection.createStatement();
		System.out.println(command.toString());
		statement.executeUpdate(command.toString());
	}

}
